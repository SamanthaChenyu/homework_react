{"version":3,"sources":["zongzi.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","_ref","number","action","react_default","a","createElement","MyButton","_ref2","children","onClick","MyClassButton","state","value","eat","click","increase","_this","setState","reduce","alert","return","transform","clicked","this","style","width","height","src","zongziImg","App_Title","App_MyButton","React","Component","App","App_MyClassButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8GCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+LCalCC,SAAQ,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,OACvB,OACEC,EAAAC,EAAAC,cAAA,mBAAWJ,EAAX,IAAoBC,EAApB,8BAQEI,EAAW,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,QAC3B,OACEN,EAAAC,EAAAC,cAAA,UAAQI,QAASA,GAAUD,IAIzBE,6MACJC,MAAQ,CACNC,MAAO,EACPC,KAAK,EACLC,MAAO,MAETC,SAAW,WACTC,EAAKC,SAAS,CACVL,MAAOI,EAAKL,MAAMC,MAAQ,OAGhCM,OAAS,WACHF,EAAKL,MAAMC,OAAS,EACtBO,MAAM,oDAENH,EAAKC,SAAS,CACZL,MAAOI,EAAKL,MAAMC,MAAQ,OAIhCQ,OAAS,WACPJ,EAAKC,SAAS,CACZL,MAAQ,OAGZS,UAAY,WACVL,EAAKC,SAAS,CACZJ,KAAMG,EAAKL,MAAME,SAGrBS,QAAU,WACRN,EAAKC,SAAS,CACZH,MAAOE,EAAKL,MAAMG,MAAQ,EAC1BF,MAAOI,EAAKL,MAAMC,MAAQ,6EAQ5B,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iDAAWkB,KAAKZ,MAAME,IAAM,eAAOV,EAAAC,EAAAC,cAAA,OAAKmB,MAN9B,CACZC,MAAO,QACPC,OAAQ,QAIgDC,IAAKC,MAA3D,UAA4EL,KAAKZ,MAAMC,OACvFT,EAAAC,EAAAC,cAACwB,EAAD,CAAO5B,OAAO,IAAIC,OAAO,aAEzBC,EAAAC,EAAAC,cAACyB,EAAD,CAAUrB,QAASc,KAAKR,UAAxB,wBAEAZ,EAAAC,EAAAC,cAACwB,EAAD,CAAO5B,OAAO,IAAIC,OAAO,mBAEzBC,EAAAC,EAAAC,cAACyB,EAAD,CAAUrB,QAASc,KAAKL,QAAxB,8BAEAf,EAAAC,EAAAC,cAACwB,EAAD,CAAO5B,OAAO,IAAIC,OAAO,mBAEzBC,EAAAC,EAAAC,cAACyB,EAAD,CAAUrB,QAASc,KAAKH,QAAxB,8BAEAjB,EAAAC,EAAAC,cAACwB,EAAD,CAAO5B,OAAO,IAAIC,OAAO,mBAEzBC,EAAAC,EAAAC,cAACyB,EAAD,CAAUrB,QAASc,KAAKF,WAAxB,8BAEAlB,EAAAC,EAAAC,cAACwB,EAAD,CAAO5B,OAAO,IAAIC,OAAO,mBAEH,IAArBqB,KAAKZ,MAAMG,MAAc,2BAASX,EAAAC,EAAAC,cAACyB,EAAD,CAAUrB,QAASc,KAAKD,SAAxB,wCAAyCC,KAAKZ,MAAMG,MAApD,mBA9DfiB,IAAMC,WAwEnBC,EAhGH,WACV,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ebf9667.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zongzi.22f212ab.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport zongziImg from './zongzi.png';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <MyClassButton></MyClassButton>\n    </div>\n  );  \n}\n\nconst Title = ({ number, action }) => {\n  return (\n    <h2>Level {number} {action}吧！粽子</h2>\n  )\n}\n\nconst onClick = () => {\n  console.log('組建內的callback需要處理，會以 handleCallback 這個模式命名');\n};\n\nconst MyButton = ({children, onClick}) => {\n  return (\n    <button onClick={onClick}>{children}</button>\n  )\n}\n\nclass MyClassButton extends React.Component {\n  state = {\n    value: 0,\n    eat: true,\n    click: 10,\n  };\n  increase = () => {\n    this.setState({\n        value: this.state.value + 1,\n    })\n  };\n  reduce = () => {\n    if (this.state.value <= 0) {\n      alert(\"外面沒有粽子了！\");\n    } else {\n      this.setState({\n        value: this.state.value - 1,\n      })\n    }\n  }\n  return = () => {\n    this.setState({\n      value : 0,\n    })\n  }\n  transform = () => {\n    this.setState({\n      eat: !this.state.eat,\n    })\n  }\n  clicked = () => {\n    this.setState({\n      click: this.state.click - 1,\n      value: this.state.value + 1,      \n    })\n  }\n  render() {\n    const style = {\n      width: '100px',\n      height: 'auto',\n    };\n    return (\n      <div>\n        <h1>端午節快樂，{this.state.eat ? \"粽子\" : <img style={style} src={zongziImg} />} ：{this.state.value}</h1>\n        <Title number=\"1\" action=\": 去\" />\n        {/* <button onClick={this.increase}>去吧！</button> */}\n        <MyButton onClick={this.increase}> 去吧！ </MyButton>\n\n        <Title number=\"2\" action=\": 回來\" />\n        {/* <button onClick={this.reduce}>回來吧！</button> */}\n        <MyButton onClick={this.reduce}> 回來吧！ </MyButton>\n\n        <Title number=\"3\" action=\": 消失\" />\n        {/* <button onClick={this.return}>消失吧！</button> */}\n        <MyButton onClick={this.return}> 消失吧！ </MyButton>\n\n        <Title number=\"4\" action=\": 變形\" />\n        {/* <button onClick={this.transform}>變形吧！</button> */}\n        <MyButton onClick={this.transform}> 變形吧！ </MyButton>\n\n        <Title number=\"5\" action=\": 點爆\" />\n        {/* {this.state.click === 0 ? \"粽子爆了\" : <button onClick={this.clicked}>點爆吧！還有{this.state.click}次</button>} */}\n        {this.state.click === 0 ? \"粽子爆了\" : <MyButton onClick={this.clicked}> 點爆吧！還有{this.state.click}次 </MyButton>}\n        \n      </div>\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}